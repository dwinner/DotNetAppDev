/*
    public override void ProcessGenericList(IEnumerable<Manager[]> managerList, Dictionary<string, int[,,,]> map)
    {
        base.ProcessGenericList(managerList, map);
    }

*/

MethodDeclaration(
    PredefinedType(
        Token(
            TriviaList(),
            SyntaxKind.VoidKeyword,
            TriviaList(
                Space
            )
        )
    ),
    Identifier("ProcessGenericList")
)
.WithModifiers(
    TokenList(
        new []{
            Token(
                TriviaList(
                    Whitespace("    ")
                ),
                SyntaxKind.PublicKeyword,
                TriviaList(
                    Space
                )
            ),
            Token(
                TriviaList(),
                SyntaxKind.OverrideKeyword,
                TriviaList(
                    Space
                )
            )
        }
    )
)
.WithParameterList(
    ParameterList(
        SeparatedList<ParameterSyntax>(
            new SyntaxNodeOrToken[]{
                Parameter(
                    Identifier("managerList")
                )
                .WithType(
                    GenericName(
                        Identifier("IEnumerable")
                    )
                    .WithTypeArgumentList(
                        TypeArgumentList(
                            SingletonSeparatedList<TypeSyntax>(
                                ArrayType(
                                    IdentifierName("Manager")
                                )
                                .WithRankSpecifiers(
                                    SingletonList<ArrayRankSpecifierSyntax>(
                                        ArrayRankSpecifier(
                                            SingletonSeparatedList<ExpressionSyntax>(
                                                OmittedArraySizeExpression()
                                            )
                                        )
                                    )
                                )
                            )
                        )
                        .WithGreaterThanToken(
                            Token(
                                TriviaList(),
                                SyntaxKind.GreaterThanToken,
                                TriviaList(
                                    Space
                                )
                            )
                        )
                    )
                ),
                Token(
                    TriviaList(),
                    SyntaxKind.CommaToken,
                    TriviaList(
                        Space
                    )
                ),
                Parameter(
                    Identifier("map")
                )
                .WithType(
                    GenericName(
                        Identifier("Dictionary")
                    )
                    .WithTypeArgumentList(
                        TypeArgumentList(
                            SeparatedList<TypeSyntax>(
                                new SyntaxNodeOrToken[]{
                                    PredefinedType(
                                        Token(SyntaxKind.StringKeyword)
                                    ),
                                    Token(
                                        TriviaList(),
                                        SyntaxKind.CommaToken,
                                        TriviaList(
                                            Space
                                        )
                                    ),
                                    ArrayType(
                                        PredefinedType(
                                            Token(SyntaxKind.IntKeyword)
                                        )
                                    )
                                    .WithRankSpecifiers(
                                        SingletonList<ArrayRankSpecifierSyntax>(
                                            ArrayRankSpecifier(
                                                SeparatedList<ExpressionSyntax>(
                                                    new SyntaxNodeOrToken[]{
                                                        OmittedArraySizeExpression(),
                                                        Token(SyntaxKind.CommaToken),
                                                        OmittedArraySizeExpression(),
                                                        Token(SyntaxKind.CommaToken),
                                                        OmittedArraySizeExpression(),
                                                        Token(SyntaxKind.CommaToken),
                                                        OmittedArraySizeExpression()
                                                    }
                                                )
                                            )
                                        )
                                    )
                                }
                            )
                        )
                        .WithGreaterThanToken(
                            Token(
                                TriviaList(),
                                SyntaxKind.GreaterThanToken,
                                TriviaList(
                                    Space
                                )
                            )
                        )
                    )
                )
            }
        )
    )
    .WithCloseParenToken(
        Token(
            TriviaList(),
            SyntaxKind.CloseParenToken,
            TriviaList(
                LineFeed
            )
        )
    )
)
.WithBody(
    Block(
        SingletonList<StatementSyntax>(
            ExpressionStatement(
                InvocationExpression(
                    MemberAccessExpression(
                        SyntaxKind.SimpleMemberAccessExpression,
                        BaseExpression()
                        .WithToken(
                            Token(
                                TriviaList(
                                    Whitespace("        ")
                                ),
                                SyntaxKind.BaseKeyword,
                                TriviaList()
                            )
                        ),
                        IdentifierName("ProcessGenericList")
                    )
                )
                .WithArgumentList(
                    ArgumentList(
                        SeparatedList<ArgumentSyntax>(
                            new SyntaxNodeOrToken[]{
                                Argument(
                                    IdentifierName("managerList")
                                ),
                                Token(
                                    TriviaList(),
                                    SyntaxKind.CommaToken,
                                    TriviaList(
                                        Space
                                    )
                                ),
                                Argument(
                                    IdentifierName("map")
                                )
                            }
                        )
                    )
                )
            )
            .WithSemicolonToken(
                Token(
                    TriviaList(),
                    SyntaxKind.SemicolonToken,
                    TriviaList(
                        LineFeed
                    )
                )
            )
        )
    )
    .WithOpenBraceToken(
        Token(
            TriviaList(
                Whitespace("    ")
            ),
            SyntaxKind.OpenBraceToken,
            TriviaList(
                LineFeed
            )
        )
    )
    .WithCloseBraceToken(
        Token(
            TriviaList(
                Whitespace("    ")
            ),
            SyntaxKind.CloseBraceToken,
            TriviaList(
                LineFeed
            )
        )
    )
)